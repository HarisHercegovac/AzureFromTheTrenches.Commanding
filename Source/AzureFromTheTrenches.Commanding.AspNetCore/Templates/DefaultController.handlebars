using System.Collections.Generic;
using System.Threading.Tasks;
using AzureFromTheTrenches.Commanding.Abstractions;
using Microsoft.AspNetCore.Mvc;

namespace {{Namespace}}
{
{{#each Attributes}}
    {{{attribute}}}
{{/each}}
    [Route("{{Route}}")]
    public class {{Name}} : Controller
    {
        private readonly ICommandDispatcher _commandDispatcher;

        public {{Name}} (ICommandDispatcher commandDispatcher)
        {
            _commandDispatcher = commandDispatcher;
        }

{{#each Actions}}
    {{#each Attributes}}
        {{{attribute}}}
    {{/each}}
        {{{actionAttributes}}}
    {{#if HasProperties}}
        public async Task<IActionResult> {{Verb}}{{CommandType.Name}} ({{bindingAttribute}}{{CommandType.FullName}} command)
    {{else}}
        public async Task<IActionResult> {{Verb}}{{CommandType.Name}} ()
    {{/if}}
        {
    {{#unless HasProperties}}
            var command = new {{CommandType.FullName}}();
    {{/unless}}
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }
            try
            {
    {{#if ResultType}}
                var commandResult = await _commandDispatcher.DispatchAsync(command);
                return Ok(commandResult.Result);
    {{else}}
                await _commandDispatcher.DispatchAsync(command);
                return Ok();
    {{/if}}
            }
            catch(AzureFromTheTrenches.Commanding.AspNetCore.RestApiException restApiException)
            {
                return StatusCode((int)restApiException.StatusCode, restApiException.Payload);
            }
            catch(AzureFromTheTrenches.Commanding.CommandExecutionException cex)
            {
                if (cex.InnerException is AzureFromTheTrenches.Commanding.AspNetCore.RestApiException restApiException)
                {
                    return StatusCode((int)restApiException.StatusCode, restApiException.Payload);
                }
                throw;
            }
        }
{{/each}}
    }
}
